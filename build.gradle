import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.0'
}

group = 'it.jakegblp'
version = '1.0.0'

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT'

    project(':nms').subprojects.each { subproject ->
        implementation project(subproject.path)
    }
    implementation project(":version_interface")
}

allprojects {
    apply plugin: 'java'

    java {
        def module = project.name
        def javaVersion =
                (module.toLowerCase() == "NMS" || module == "version_interface") ? 16 :
                        module.matches('1\\.17(\\.1)?') ? 16 :
                                module.matches('1\\.(18|19|20)(\\.[1-4])?') ? 17 : 21
        toolchain.languageVersion.set(JavaLanguageVersion.of(javaVersion))
        tasks.withType(JavaCompile).configureEach {
            sourceCompatibility = javaVersion
            targetCompatibility = javaVersion
        }
    }

    repositories {
        mavenCentral()
        maven { url = "https://jitpack.io/" }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    }

    dependencies {
        if (project.name == "version_interface") {
            compileOnly 'org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT'
        }

        implementation 'com.github.zafarkhaja:java-semver:0.10.2'
        implementation("org.jspecify:jspecify:1.0.0")
        compileOnly 'org.jetbrains:annotations:20.1.0'

        compileOnly 'org.projectlombok:lombok:1.18.36'
        annotationProcessor 'org.projectlombok:lombok:1.18.36'

        testCompileOnly 'org.projectlombok:lombok:1.18.36'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
    }

    shadowJar {
        dependencies {
            exclude(dependency('org.projectlombok:lombok'))
            exclude(dependency('org.jetbrains:annotations'))
        }
        archiveClassifier.set("")
    }

    build {
        dependsOn shadowJar
    }
}

processResources {
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: [version: version])
}

build {
    doLast {
        subprojects.each { subproject ->
            subproject.tasks.matching { it.name == "build" }.configureEach {
                doLast {
                    delete subproject.layout.buildDirectory
                }
            }
        }
    }
}